name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # U≈ºycie zmiennych zdefiniowanych w skrypcie setup_repo.sh
    env:
      IMAGE_NAME: website-argocd-k8s-githubactions-kustomize-kyverno02
      NAMESPACE: davtrokverno02
      KUSTOMIZE_PATH: manifests/production # Dodaj ≈õcie≈ºkƒô do Kustomize

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # üí• KROK NAPRAWIAJƒÑCY B≈ÅƒÑD BUFOROWANIA üí•
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- START: KROKI NAPRAWIAJƒÑCE B≈ÅƒÑD ImagePullBackOff ---
      - name: Get Short SHA Tag
        id: tag
        # Pobieramy kr√≥tki SHA (pierwsze 7 znak√≥w) jako faktyczny tag.
        run: echo "SHA_TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Update Kustomization with new image tag
        # U≈ºywamy kustomize edit set image, aby bezpiecznie zaktualizowaƒá tag w overlayu production.
        run: |
          kustomize edit set image ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:v1.0.0-placeholder=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.SHA_TAG }} --path ${{ env.KUSTOMIZE_PATH }}

      - name: Commit and Push Kustomization changes
        # Commitujemy i wypychamy zmiany. ArgoCD wykryje ten nowy commit i wdro≈ºy obraz z poprawnym tagiem.
        run: |
          git add ${{ env.KUSTOMIZE_PATH }}/kustomization.yaml
          git commit -m "chore(gitops): update ${{ env.IMAGE_NAME }} image tag to ${{ steps.tag.outputs.SHA_TAG }} [skip ci]"
          git push
      # --- KONIEC: KROKI NAPRAWIAJƒÑCE B≈ÅƒÑD ImagePullBackOff ---
      - name: Output Image Tag
        run: |
          echo "Obraz zosta≈Ç wypchniƒôty jako: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.SHA_TAG }}"
